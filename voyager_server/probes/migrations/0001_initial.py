# Generated by Django 3.0.8 on 2020-07-27 03:36

from django.conf import settings
from django.db import migrations, models
from voyager_server.probes.models import Prober, ProbeTarget
from django.contrib.auth import get_user_model
from rest_framework.authtoken.models import Token
import django.db.models.deletion
import uuid


def seed(apps, schema_editor):
    User = get_user_model()

    test_probe_user = User.objects.create_user(
        username="test-probe", is_staff=True, is_superuser=True, password="ChangeMe"
    )
    prober = Prober.objects.create(user=test_probe_user)
    target1 = ProbeTarget.objects.create(destination="8.8.8.8", interval=30, probe_count=10)
    target2 = ProbeTarget.objects.create(destination="1.1.1.1", interval=30, probe_count=10)
    prober.targets.add(target1)
    prober.targets.add(target2)

    Token.objects.create(user=test_probe_user)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Prober",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name="ProbeTarget",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID",
                    ),
                ),
                ("destination", models.CharField(max_length=64, unique=True)),
                ("interval", models.PositiveIntegerField()),
                ("probe_count", models.PositiveIntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name="ProbeResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("target", models.CharField(max_length=64)),
                (
                    "probe",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="probes.Prober",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="prober",
            name="targets",
            field=models.ManyToManyField(to="probes.ProbeTarget"),
        ),
        migrations.AddField(
            model_name="prober",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="ProbeHop",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID",
                    ),
                ),
                ("ip", models.CharField(max_length=64, null=True)),
                ("dns_name", models.CharField(max_length=128, null=True)),
                ("response_time", models.PositiveIntegerField()),
                ("ttl", models.PositiveIntegerField()),
                ("responded", models.BooleanField()),
                (
                    "result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hops",
                        to="probes.ProbeResult",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="prober",
            constraint=models.UniqueConstraint(
                fields=("user", "name"), name="only 1 user per prober"
            ),
        ),
        migrations.RunPython(seed, migrations.RunPython.noop),
    ]
